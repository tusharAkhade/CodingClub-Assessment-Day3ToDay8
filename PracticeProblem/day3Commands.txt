Statement 1: Get user info /etc/passwd and ownership of user's home directory (select userid higher than 1000)
Solution :
paths=`cat /etc/passwd | awk -F: '{if($4 > 1000) print $7}'`
linecount=`echo "$paths" | wc -l`
for path in $paths
do
	dircontent=`ls -l $path`
	sudo chown $USER:$USER $path
	echo -e "$path : $dircontent"
done

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Statement 2: Moves files from one folder to respective folders.
Solution :
if [ -f *.txt ]
then
	for file in `ls *.txt`;
	do
		foldername=`echo $file | awk -F . '{print $1}'`
		mkdir $foldername;
		mv $file $foldername;
		echo "files moved";
	done
else
	echo "No txt files available."
fi

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Statement 3: Append current date to all log files name which has extension .log.1 from folder. (original file: access.log.1		Updated file: access.20102019.log)
Solution:
dte=`date +'%d%m%Y'`
echo "$dte"
for file in `ls *.log.1`;
do
	first=`echo $file | awk -F . '{print $1}'`		#access
	second=`echo $file | awk -F . '{print $2}'`		#log
	#third=`echo $file | awk -F . '{print $3}'`		#1
	updatedFileName=`echo $first'-'$dte'.'$second`		#access-24052021.log
	mv $file $updatedFileName
	echo "$updatedFileName"
done

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Statement 4: Archive the files from /var/log folder which have modified 7 days ago and move it to your backup folder.
Solution:
destination="C:\Users\tusha\Desktop\tusharTerminalCommands\linux-content\demo\var\log\backupFolder"
for file in `find var/log -type f`
do
	cp $file $destination
	echo "File Copied"
done

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Statement 5: Print last 4 frequently access url count in sorted order from /var/log/httpd/access.log
Solution :
cat access.log | awk '{print $11}' | grep -v '"-"' | sort | uniq -c | sort -nr | head -4

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Statement 6: Print list of last 4 frequently access url at particular hours from /var/log/httpd/access.log
Solution:
echo -e |cat access.log | awk '{print $4"["$11}' | sort | uniq -c | sort -r |head -4 | awk -F[ '{print $1  $2"--"$3}'

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Statement 7: Print list of web response code count in the unique sorted order at specific hours.
Solution:
echo -e |cat access.log | awk '{print $9}' | sort | uniq -c | sort -nr |head -4

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Statement 8: Print list of last 10 unique sorted client ip from /var/log/httpd/access.log
Solution:
cat access.log | awk '{if (NR!=1) {print substr($16, 2, length($16)-2)}}' | sort -nr | head -10

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Statement 9: Check if folder exists or not. If its not present, create it.
Solution: 
if [ -d folder ]
then
	echo "Directory already present"
else
	mkdir folder
	echo "Directory created"
fi 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Statement 10: Execute command "hello" and "ls" and check its execution status and print whether command executed successful or not.
Solution:
"hello" command not executed and its execution status is 127 .
"ls" command executed and its execution status is 0.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Statement 11: Set environment usersecret="dH34xJaa23" if its already not set.
Solution:
value=`echo $usersecret`
length=`echo ${#value}`
if [ $length==0 ]
then
	export usersecret="dH34xJaa23"
	echo "value set"
else
	echo "error: env already set"
fi

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Statement 12: Find a word "systemd" from all log files in the folder /var/log and print number of occurence more than 0 against each file.
Solution:
for file in `ls /var/log/*.log`
do
	count=`grep -c 'systemd' $file`
	if [ $count -gt 0 ]
	then
		echo $count
	fi
done

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Statement 13: Create process list table displays process id, parent id, parent process id, command name, % of memory consumption, % of cpu utilization.
Solution:
ps -o pid,ppid,cmd,%mem,pcpu

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Statement 14: Data analysis
Id EmployeeName JobTitle        BasePay OvertimePay OtherPay TotalPay TotalPayBenefits
1  NATHANIEL    GM              167411  0           400184   567595   567595
2  GARY         CAPTAIN         155966  245131      137811   538909   538909
3  ALBERT       CAPTAIN         212739  106088      16452    335279   335279
4  CHRISTOPHER  MECHANIC        77916   56120       198306   332343   332343
5  PATRICK      DEPUTYCHIEF     134401  9737        182234   326373   326373
6  DAVID        ASSTDEPUTY      118602  8601        189082   316285   316285
7  ALSON        BATTALIONCHIEF  92492   89062       134426   315981   315981
8  DAVID        DEPUTYDIRECTOR  256576  0           51322    307899   307899
10 JOANNE       CHIEF           285262  0           17115    302377   302377
12 PATRICIA     CAPTAIN         99722   87082       110804   297608   297608
13 EDWARD       EXECUTIVE       294580  0           0        294580   294580


i)  Print EmployeeName and TotalPay who has BasePay greater than 10000. 
=>  cat data.csv | awk '{if($4>10000) print $2, $7}'

ii) What is the aggregate TotalPay of employees whose jobtitle is 'CAPTAIN'
=>  cat data.csv | grep CAPTAIN | awk '{sum+=$7}END{print sum}'
    1171796

iii) Print JobTitle and Overtimepay who has Overtimepay is between 7000 and 10000.
=>   cat data.csv | awk '{if($5>7000 && $5<10000)print $3, $5}'
     DEPUTYCHIEF 9737
     ASSTDEPUTY 8601

iv) Print average BasePay
=>  cat data.csv | awk '{sum+=$4}END{print sum/NR}'
    157972

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Statement 15: Find the difference between original file and the updated file. Apply changes to the original file.
Solution:
if [ -d original-bkup ]
then
	cp ~/Desktop/tusharTerminalCommands/linux-content/demo/original/original.txt ~/Desktop/tusharTerminalCommands/linux-content/demo/original-bkup
	mv ~/Desktop/tusharTerminalCommands/linux-content/demo/original-bkup/original.txt ~/Desktop/tusharTerminalCommands/linux-content/demo/original-bkup/original-bkup.txt
else
	mkdir original-bkup
	cp ~/Desktop/tusharTerminalCommands/linux-content/demo/original/original.txt ~/Desktop/tusharTerminalCommands/linux-content/demo/original-bkup
	mv ~/Desktop/tusharTerminalCommands/linux-content/demo/original-bkup/original.txt ~/Desktop/tusharTerminalCommands/linux-content/demo/original-bkup/original-bkup.txt
fi
difference=`diff ~/Desktop/tusharTerminalCommands/linux-content/demo/original/original.txt ~/Desktop/tusharTerminalCommands/linux-content/demo/updated/updated.txt`

diffLength=${#difference}
if [ $diffLength -gt 0 ]
then
	echo "Both files are different"
	cp ~/Desktop/tusharTerminalCommands/linux-content/demo/original/original.txt ~/Desktop/tusharTerminalCommands/linux-content/demo/updated/updated.txt
else
	echo "No difference"
fi


